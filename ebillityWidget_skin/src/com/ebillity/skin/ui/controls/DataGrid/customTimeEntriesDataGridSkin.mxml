<?xml version="1.0" encoding="utf-8"?>


<s:SparkSkin 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	alpha.disabled="0.5" minWidth="89" minHeight="84" xmlns:local="*" xmlns:DataGrid="com.ebillity.skin.ui.controls.DataGrid.*">
	
	<fx:Metadata>
		<![CDATA[
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		@langversion 3.0
		@playerversion Flash 10
		@playerversion AIR 1.5
		@productversion Flex 4
		*/
		[HostComponent("spark.components.DataGrid")]
		]]>
	</fx:Metadata>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<fx:Script>
			<![CDATA[
				import spark.layouts.RowAlign;
			]]>
		</fx:Script>
	
	</s:states>

	<fx:Declarations>
		<!--- @private -->        
		<fx:Component id="alternatingRowColorsBackground">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement"><!--implements="spark.components.gridClasses.IGridVisualElement"-->
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const colors:Array = dataGrid.getStyle("alternatingRowColors");
							if (colors && (colors.length > 0))
							{
								dataGrid.styleManager.getColorNames(colors); // lazily replace color names with ints
								rowBackgroundFillColor.color = 0x454545;
							}
							else
							{          
								//This should be the same as bgFill.color.
								rowBackgroundFillColor.color = 0x454545;
							}
						} 
					]]>
				</fx:Script>  
				<s:fill>
					<!--- @private -->   
					<s:SolidColor id="rowBackgroundFillColor" color="green"/>
				</s:fill>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->        
		<fx:Component id="caretIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("caretColor");
							//caretIndicatorFill.color = color;
						}
					]]>
				</fx:Script>
				
				<!--<s:stroke>
				
				<s:SolidColorStroke id="caretIndicatorFill" color="green" weight="1"/>
				</s:stroke>-->
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="columnSeparator">
			<s:Line>
				<!-- <s:stroke>
				<s:SolidColorStroke color="green" weight="0" caps="square"/>
				</s:stroke>-->
			</s:Line>
		</fx:Component>
		
		<!--- Defines the value of the columnSeparator property for the columnHeaderGroup. -->
		<fx:Component id="headerColumnSeparator">
			<s:Line>
				<!--  <s:stroke>
				<s:SolidColorStroke color="yellow" weight="0" caps="square"/>
				</s:stroke>-->
			</s:Line>
		</fx:Component>
		
		<!--- Defines the value of the headerRenderer property for the columnHeaderGroup. 
		The default is spark.skins.spark.DefaultGridHeaderRenderer -->
		<fx:Component id="headerRenderer">
			<s:DefaultGridHeaderRenderer/>
			<!--<DataGrid:CustomGridHeaderItemRenderer />-->
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="hoverIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement" left="0" right="0" width="100%" >
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
					 	public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("rollOverColor");
							// hoverIndicatorFill.color = color;
						} 
					]]>
				</fx:Script>
				
				<s:fill >
					<!--- @private -->
					<s:SolidColor id="hoverIndicatorFill" color="#BBBBBB"/>
				</s:fill>
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="rowSeparator">
			<s:Line>
				<s:stroke>
					<s:SolidColorStroke color="#4d4d4f" weight="2" alpha="1" caps="square"/>
				</s:stroke>
			</s:Line>
		</fx:Component>
		
	
		
		<!--- @private -->
		<fx:Component id="selectionIndicator">
			<s:Rect implements="spark.components.gridClasses.IGridVisualElement">
				<fx:Script>
					<![CDATA[
						import spark.components.DataGrid;
						import spark.components.Grid;
						
						/**
						 * @private
						 */
						public function prepareGridVisualElement(grid:Grid, rowIndex:int, columnIndex:int):void
						{
							const dataGrid:DataGrid = grid.dataGrid;
							if (!dataGrid)
								return;
							
							const color:uint = dataGrid.getStyle("selectionColor");
							//  selectionIndicatorFill.color = color;
						}
					]]>
				</fx:Script>
				
				<s:fill>
					<!--- @private -->
					<s:SolidColor id="selectionIndicatorFill" color="#e7e8e9"/>
				</s:fill>                
			</s:Rect>
		</fx:Component>
		
		<!--- @private -->
		<fx:Component id="editorIndicator">
			<s:Rect>
				<s:fill>
					<s:SolidColor color="#414142"/>
				</s:fill>                
			</s:Rect>
		</fx:Component>                    
		
	</fx:Declarations>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			/*     static private const exclusions:Array = ["scroller", "background", "columnHeaderGroup"];
			static private const contentFill:Array = ["bgFill"];
			
			
			override public function get colorizeExclusions():Array {return exclusions;}
			
			
			override public function get contentItems():Array {return contentFill};
			
			
			override protected function initializationComplete():void
			{
			useChromeColor = true;
			super.initializationComplete();
			}
			
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
			if (getStyle("borderVisible") == true)
			{
			border.visible = true;
			background.left = background.top = background.right = background.bottom = 1;
			scroller.minViewportInset = 1;
			}
			else
			{
			border.visible = false;
			background.left = background.top = background.right = background.bottom = 0;
			scroller.minViewportInset = 0;
			}
			
			// borderStroke.color = getStyle("borderColor");
			//  borderStroke.alpha = getStyle("borderAlpha");
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			} */
		]]>
	</fx:Script>
	
	<!-- column header, content -->
	<s:VGroup verticalAlign="middle" horizontalAlign="justify" gap="0" left="0" right="0" top="0" bottom="0">
		
		<!--- @private -->
		<!--<s:GridColumnHeaderGroup id="columnHeaderGroup" 
								 paddingLeft="0" paddingTop="0" paddingRight="0" minHeight="35" 
								 columnSeparator="{headerColumnSeparator}"
								 headerRenderer="{headerRenderer}"/>-->
		
		<s:Group height="100%" >
			
			<!--- @private -->
			<s:Rect id="background" left="1" right="1" top="0" bottom="1" >
				<s:fill>
					<!--- Defines the color of the background. The default color is 0xFFFFFF. -->
					<s:SolidColor id="bgFill" color="#414142" />
				</s:fill>
			</s:Rect>
			
			<!-- header separator, scroller and grid -->
			<s:VGroup verticalAlign="middle" horizontalAlign="justify" height="100%" width="100%" gap="0">
				<!--- @private -->
				<s:Line id="headerSeparator" >
					<s:stroke>
						<s:SolidColorStroke color="green" weight="2" alpha="1" caps="square"/>
					</s:stroke>
				</s:Line>          
				
				<!--- @private -->
				<s:Scroller id="scroller"  minViewportInset="1" hasFocusableChildren="false" height="100%">
					<!--- @private -->
					<s:Grid id="grid"  itemRenderer="spark.skins.spark.DefaultGridItemRenderer">
						<s:GridLayer name="backgroundLayer"/>
						<s:GridLayer name="selectionLayer"/>
						<s:GridLayer name="editorIndicatorLayer"/>                            
						<s:GridLayer name="rendererLayer"/>
						<s:GridLayer name="overlayLayer"/>
					</s:Grid>                    
				</s:Scroller>
			</s:VGroup>
			
		</s:Group>
		
	</s:VGroup>
	
	<!-- border -->
	
	<s:Rect left="0" right="0" bottom="0" top="0" id="border">
		<s:stroke>
			
			<s:SolidColorStroke id="borderStroke" color="#4d4d4f" weight="2" alpha="1" />
		</s:stroke>
	
		
	</s:Rect>
	
	
	
	
</s:SparkSkin>
